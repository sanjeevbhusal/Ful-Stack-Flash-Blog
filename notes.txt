Install Virtual Environment : 
    1) py -3 -m venv venv
    2) Select Interpreter . View > Command Palette > Select Interpreter
    3) Set Command Line to Virtual Env. venv\Scripts\activate.bat

Install Flask: 
    1) Open REPL. import Flask. If no error, imported succesfully. The package gets installed in venv\Lib

Basic Flask Application
    1) Import Flask from flask package. 
    2) Create a instance of Flask App like app = Flask(__name__). Here __name__ means our directory. It tells flask where to look for static files and templates files.
    3)Create a decorator like app.route("/). It is a decorator which handles all the logic of rendering our files to appropriate URL.
    4)Create a function and render some text. Our flask app is ready to be served.

Serving Flask App:
    Flask Way
        Before we run the file, we have to set an environment variable to the file we want to be our flask application.
        1) run the command: set FLASK_APP=<filename>.py
        2) now, run the command: flask run.
        3) The application should start without any errors. The application is hosted on localmachine on port 5000. It is a running webserver. It comes with flask. It should be running if we want to visit our site.
        4) The application runs in Production Mode by default. To switch it to developement/debug mode, set another environment varible.
        5) set FLASK_DEBUG=1. Now, the application runs in debug mode.
    Python Way
       1) If we don't want to set up environment variables, we can directly run the file from terminal using Python <filename.py> command.
       2) But before that, we have to write a line of code in our flask application: app.run(debug=True)
       3) The line should be at thebottom of the file.
       4) Its better to wrap this file in a condition: 
                if __main__ == "__main__:
                    app.run(debug=True).
       5) The condition ensures that we only run this file when we run the script directly on the terminal. if some other modules, import this file, the condition will be false and flask application won't start.
       6)debug=True is a optional parameter. This is for changing the environment to development.

Errors:
    404 Error:
        If we try to navigate to a URL which our application doesn't understand, flask is going to response with 404 Error.
    Function Name:
        We can't have two functions with same name although they might be in seperate routes. 

Note:
    1) If we want a function to handle multiple decorators, we can just put two decorators next to each other(seperate lines).

Serving up Static HTML Pages
    1)In the function below the decorator routes(app.route("/)), we can use a method called render_template(imported from flask) to render any HTML page. 
    2)We need to create a template directory at the same level of our main file. 
    3)Inside the template directory, lets assume we make "about.html" file. In the render_template method, we have to pass the name of our html file as a string.("about.html") 
    4)Note that we don't have to import any html files in out=r main file. Flask automatically searches for the html file inside the templates folder. 
    5)If flask doesn't find templates folder, it will throw an error. Similarly, if we donot mention the correct file name, flask gives error. 

Serving up Dynamic HTML Pages
    1)If we wanted to pass any data to HTML page from our main file, we can do that very easily. in create_template method, as a second argument we can pass any data. 
    2) Example: return create_template("file1.html", animal = ["cat", "pet"])
    3) Now, inside file1.html we can access the variable animal and its value. 
    4) Flask uses a templating engine called Jinja. It allows us to write code inside HTML files. 
    
    Jinja Syntax 
        1) To access any variable passed in render_template method, we open two curly brackets. Eg: {{}}
        2) Inside the curly brackets, we can refer to the variable. When we run the application, we will have the value of that variable.
        3) If we want to use any loops, conditions etc (basically python syntax), we have to use {% for i in animal %} and {% endfor %}.
        4) Between these two code blocks, we can have either any HTML content or we can access any extra variables passed in create_template. 
    
    Using a layout.html page:
        1) We use a layout.html page (file name can be anything) where we write the code that is going to be repeated in 2 or more files. 
        2) We identify the portion where we want to render specific content from each file and create a Code Block. 
        3) This file can also be called (Parent File)
        4)Then from another file(child file), we reference to the parent file's specific Code block and insert file specific content.

    Use Bootstrap/Custom CSS:
        1) We need to create a folder called static which will contain all our static files such as CSS, JavaScript. 
        2) We can include cdn link of bootstrap into our layout file. We can also create our custom CSS and include in in layout file.  